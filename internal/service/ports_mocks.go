// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	models "test/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockPortService is a mock of PortService interface.
type MockPortService struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceMockRecorder
}

// MockPortServiceMockRecorder is the mock recorder for MockPortService.
type MockPortServiceMockRecorder struct {
	mock *MockPortService
}

// NewMockPortService creates a new mock instance.
func NewMockPortService(ctrl *gomock.Controller) *MockPortService {
	mock := &MockPortService{ctrl: ctrl}
	mock.recorder = &MockPortServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService) EXPECT() *MockPortServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPortService) Add(port *models.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPortServiceMockRecorder) Add(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPortService)(nil).Add), port)
}

// PortsBufferFlush mocks base method.
func (m *MockPortService) PortsBufferFlush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortsBufferFlush")
	ret0, _ := ret[0].(error)
	return ret0
}

// PortsBufferFlush indicates an expected call of PortsBufferFlush.
func (mr *MockPortServiceMockRecorder) PortsBufferFlush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortsBufferFlush", reflect.TypeOf((*MockPortService)(nil).PortsBufferFlush))
}
